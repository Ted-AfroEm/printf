# NAME
_printf

# SYNOPSIS
#include <stdarg.h>

int _printf(const char *format, ...);

#DESCRIPTION
The functions in the **_printf()** family profuce output
according to a *format* as described below.

The function wrote the output under the control of a *format*
string that specifies how subsequent arguments are converted
for output.

Format of the format string
The format string is a character string, beginning and ending in
its initial shift state, if any. The format string is composed
of zero or more directives: ordinary character (not %), which
are copied unchanged to the output stream; and conversion
specifications, each of which results in fetching zero or more
subsequent arguments. Each conversion specification is introduced
by the character %, and ends witha *conversion* *specifier*.

Conversion specifiers
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:

**d, i** The *int* argument is converted to signed decimal notation.

**c** The charater is written

**s** the const char * argument is expected to be a pointer
      to an array of character type (pointer to a string).
      Characters from the array are written up to (but not
      including) a terminating null byte ('\0');

#RETURN VALUE
	Upon successful return, these functions return the number of
       	characters printed (excluding the null byte used to end output to
       	strings).

       If an output error is encountered, a negative value is returned.

#EXAMPLE
	To print "This is man page":

	   #include "main.h"
	   _printf("This is man page");

	To print a string array ponter:

	   #include "main.h"
	   char *message = "see you next time.";
	   _printf("Selamta, %s", message);